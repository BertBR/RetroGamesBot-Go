// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package postgres

import (
	"context"
)

const getTotalSortedByConsole = `-- name: GetTotalSortedByConsole :many
SELECT console, sum("public"."games"."sorted") AS "sum"
    FROM "public"."games"
    GROUP BY console
    ORDER BY console DESC
    LIMIT 10
`

type GetTotalSortedByConsoleRow struct {
	Console string
	Sum     int64
}

func (q *Queries) GetTotalSortedByConsole(ctx context.Context) ([]GetTotalSortedByConsoleRow, error) {
	rows, err := q.db.Query(ctx, getTotalSortedByConsole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalSortedByConsoleRow
	for rows.Next() {
		var i GetTotalSortedByConsoleRow
		if err := rows.Scan(&i.Console, &i.Sum); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalSortedByGenre = `-- name: GetTotalSortedByGenre :many
SELECT genre, sum("public"."games"."sorted") AS "sum"
    FROM "public"."games"
    GROUP BY genre
    ORDER BY genre DESC
    LIMIT 10
`

type GetTotalSortedByGenreRow struct {
	Genre string
	Sum   int64
}

func (q *Queries) GetTotalSortedByGenre(ctx context.Context) ([]GetTotalSortedByGenreRow, error) {
	rows, err := q.db.Query(ctx, getTotalSortedByGenre)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTotalSortedByGenreRow
	for rows.Next() {
		var i GetTotalSortedByGenreRow
		if err := rows.Scan(&i.Genre, &i.Sum); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
